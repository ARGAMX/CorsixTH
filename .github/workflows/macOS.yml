---
name: macOS

on:
  push:
    branches-ignore:
      - 'gh-pages'
  pull_request:
  workflow_dispatch:
    inputs:
      animview:
        description: 'Build AnimView?'
        default: 'false'
        type: boolean
      pr:
        description: 'Build this PR'
        type: string

jobs:
  macOS:
    runs-on: macos-15 # arm
    name: macOS Apple Silicon (ad-hoc signed)
    steps:
      - uses: actions/checkout@v4
      - name: Define job
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          if [[ "${{inputs.pr}}" -gt 0 ]]; then
            gh pr checkout --repo CorsixTH/CorsixTH ${{inputs.pr}}
          fi
          target="11.3" # macOS Big Sur
          echo "MACOSX_DEPLOYMENT_TARGET=$target" >> $GITHUB_ENV
          echo "CFLAGS=-O2 -pipe -mmacos-version-min=$target" >> $GITHUB_ENV
          echo "CXXFLAGS=-O2 -pipe -mmacos-version-min=$target" >> $GITHUB_ENV
          sudo mkdir -p /usr/local/
          sudo chown -R "$(id -u):$(id -g)" /usr/local/
      - name: Cache dependencies
        id: cache
        uses: actions/cache@v4
        with:
          key: macos${{ inputs.animview && ' with animview' || '' }} | 1
          path: build_files/
      - name: Build dependencies
        if: ${{ steps.cache.outputs.cache-hit != 'true' }}
        run: |
          mkdir -p build_files
          cd build_files
          # Fetch source of latest version in homebrew and unarchive into the current folder
          HOMEBREW_FORCE_BREWED_CURL=1 brew unpack lua luarocks sdl2 libxmp libgme wavpack libogg opus opusfile \
            sdl2_mixer freetype ffmpeg #spdlog
          brew uninstall --ignore-dependencies brotli freetype # Fix ffmpeg error at CorsixTH build time
          HOMEBREW_NO_AUTO_UPDATE=1 brew install -f md5sha1sum nasm

          echo ::group::Lua; (cd lua-*; make macosx test install); echo ::endgroup::
          echo ::group::Luarocks; (cd luarocks*; ./configure; make); echo ::endgroup::
          echo ::group::SDL2; (cd sdl2-*; ./configure --disable-dependency-tracking --disable-joystick \
            --disable-haptic --disable-shared; make install); echo ::endgroup::
          echo ::group::libxmp; (cd libxmp*; cmake -Bbuild . -DBUILD_SHARED=OFF
            cmake --build build/ --target install); echo ::endgroup::
          echo ::group::libgme; (cd game-music-emu*; cmake -Bbuild . -DBUILD_SHARED_LIBS=OFF
            cmake --build build/ --target install); echo ::endgroup::
          echo ::group::wavpack; (cd wavpack*; ./configure --disable-apps --enable-static --disable-shared
            make install); echo ::endgroup::
          echo ::group::libogg; (cd libogg-*; ./configure --disable-shared; make install); echo ::endgroup::
          echo ::group::opus; (cd opus-*; ./configure --disable-shared --disable-doc --disable-extra-programs
            make install); echo ::endgroup::
          echo ::group::opusfile; (cd opusfile-*; ./configure --disable-shared --disable-doc --disable-examples
            make install); echo ::endgroup::
          echo ::group::SDL2 Mixer; (cd sdl2_mixer*; cmake -Bbuild . -LA -DSDL2MIXER_MIDI_FLUIDSYNTH=OFF \
            -DSDL2MIXER_MIDI_TIMIDITY=OFF -DSDL2MIXER_WAVPACK=ON \
            -DSDL2MIXER_DEPS_SHARED=OFF -DBUILD_SHARED_LIBS=OFF -DSDL2MIXER_WAVE=ON -DSDL2MIXER_OPUS=ON
            cmake --build build/ --target install); echo ::endgroup::
          echo ::group::Freetype; (cd freetype*; ./configure --without-png --without-zlib --without-bzip2 \
            --without-harfbuzz --disable-shared; make install); echo ::endgroup::
          echo ::group::FFmpeg; (cd ffmpeg*; ./configure --disable-everything --disable-doc --disable-debug \
            --disable-programs --enable-decoder=smacker --enable-decoder=smackaud --enable-demuxer=smacker \
            --enable-small --enable-static
            make -j install CFLAGS="$CFLAGS -DHAVE_UNISTD_H=0" LDFLAGS="-Wl,-ld_classic,-headerpad_max_install_names")
            echo ::endgroup::
          #echo ::group::spdlog; (cd spdlog*; cmake -Bbuild . -DSPDLOG_BUILD_EXAMPLE=OFF
          #  cmake --build build/ --target install); echo ::endgroup::
      - name: Install dependencies, install luarocks
        run: |
          # Install each from the cache to /usr/local/
          cd build_files
          echo ::group::Lua; (cd lua-*; make install); echo ::endgroup::
          echo ::group::Luarocks; (cd luarocks*; make install); echo ::endgroup::
          echo ::group::SDL2; (cd sdl2-*; make install); echo ::endgroup::
          echo ::group::libxmp; (cd libxmp*; cmake --build build/ --target install); echo ::endgroup::
          echo ::group::libgme; (cd game-music-emu*; cmake --build build/ --target install); echo ::endgroup::
          echo ::group::wavpack; (cd wavpack*; make install); echo ::endgroup::
          echo ::group::libogg; (cd libogg-*; make install); echo ::endgroup::
          echo ::group::opus; (cd opus-*; make install); echo ::endgroup::
          echo ::group::opusfile; (cd opusfile-*; make install); echo ::endgroup::
          echo ::group::SDL2 Mixer; (cd sdl2_mixer*; cmake --build build/ --target install); echo ::endgroup::
          echo ::group::Freetype; (cd freetype*; make install); echo ::endgroup::
          echo ::group::FFmpeg; (cd ffmpeg*; make install); echo ::endgroup::
          #echo ::group::spdlog; (cd spdlog*; cmake --build build/ --target install); echo ::endgroup::

          echo ::group::Luarocks
          luarocks install lpeg
          luarocks install luafilesystem
          luarocks install luasocket
          echo ::endgroup::
      - name: Make build files, build and install CorsixTH
        run: |
          # Create makefiles
          cmake . -G"Unix Makefiles" -Bbuild -DCMAKE_INSTALL_PREFIX=/Applications --debug-output -LA \
           -DCMAKE_BUILD_TYPE=RelWithDebInfo -DWITH_AUDIO=ON -DWITH_MOVIES=ON -DBUILD_ANIMVIEW=OFF \
           -DWITH_LUAROCKS=ON -DWITH_LUAJIT=OFF -DLUA_LIBRARY=/usr/local/lib/liblua.a \
           -DSDL_LIBRARY="$(sdl2-config --libs) -lm -liconv -lxmp -lgme -lwavpack -logg -lopus -lopusfile -Wl,-framework,Cocoa" \
           -DFREETYPE_LIBRARY_RELEASE=/usr/local/lib/libfreetype.a
          # Build CorsixTH
          cd build/CorsixTH
          make VERBOSE=1
          make install
          # Check program dependencies (/System and /usr/lib are OK)
          otool -L /Applications/CorsixTH.app/Contents/MacOS/CorsixTH
          # Ad-hoc sign
          codesign --force --timestamp --sign - /Applications/CorsixTH.app/
          codesign -dvvvv /Applications/CorsixTH.app/
      - name: Test CorsixTH
        run: |
          /Applications/CorsixTH.app/Contents/MacOS/CorsixTH > test & sleep 2; kill $!
          grep -e "Welcome to CorsixTH" test
      - name: Build and install Animview dependancy/Restore cache
        env:
          CACHE_HIT: ${{ steps.cache.outputs.cache-hit }}
        if: ${{ inputs.animview }}
        run: |
          cd $GITHUB_WORKSPACE/build_files
          if [ "$CACHE_HIT" != "true" ] || ! ls -d wx*; then
            brew unpack wxwidgets; cd wx*
            echo ::group::Configure; ./configure --disable-shared --disable-tests --with-osx_cocoa \
              --with-macosx-version-min=$MACOSX_DEPLOYMENT_TARGET --without-libjpeg --without-libtiff \
              --without-libpng --disable-svg --disable-debug --disable-dependency-tracking
            echo ::group::Build; make; echo ::endgroup::
            cd ..
          fi
          echo ::group::Install; cd wx*; make install; echo ::endgroup::
      - name: Make build files, build and install AnimView
        if: ${{ inputs.animview }}
        run: |
          cmake . -G"Unix Makefiles" -Bbuild -DCMAKE_INSTALL_PREFIX=/Applications --debug-output \
           -DCMAKE_BUILD_TYPE=RelWithDebInfo -DBUILD_ANIMVIEW=ON -DBUILD_CORSIXTH=OFF
          cd build/AnimView
          make VERBOSE=1
          make install
          # Check program dependencies
          otool -L /Applications/Animview.app/Contents/MacOS/Animview
          # Ad-hoc sign
          codesign --force --timestamp --sign - /Applications/Animview.app/
          codesign -dvvvv /Applications/CorsixTH.app/
      - name: Create build artifact
        shell: bash
        run: |
          repo=$(echo $GITHUB_REPOSITORY-$GITHUB_REF | sed -e 's/\//-/g' -e 's/refs-heads-//')
          build="$(if [ "${{inputs.animview}}" == 'true' ]; then echo "+animview"; fi)"
          name="CTH-$(date +'%Y-%m-%d-%H-%M-%S')-$build-$repo-${GITHUB_SHA:0:7}"
          echo "NAME=$name" >> $GITHUB_ENV
          cd /Applications/
          zip $GITHUB_WORKSPACE/$name --symlinks --recurse-paths CorsixTH.app/ Animview.app/ || true
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          path: 'CTH*'
          name: ${{ env.NAME }}
        continue-on-error: true
